/**
 * 关于整个项目(app/module)的通用gradle配置
 */
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    //这个是ARouter需要配置的kapt
    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }

    compileSdkVersion rootProject.ext.versions.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.versions["minSdkVersion"]
        targetSdkVersion rootProject.ext.versions["targetSdkVersion"]
        versionCode rootProject.ext.versions["versionCode"]
        versionName rootProject.ext.versions["versionName"]
        multiDexEnabled true
        flavorDimensions "versionCode"
        ndk { //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi"/*, "armeabi-v7a", "arm64-v8a", "x86", "arm64-v8a", "x86_64"*/
        }
    }

//    signingConfigs {
//        //File file = new File()
//        debug {
//            keyAlias 'key'
//            keyPassword '123456'
//            storeFile file('D:/mvvm.jks')
//            storePassword '123456'
//        }
//        release {
//            keyAlias 'key'
//            keyPassword '123456'
//            storeFile file('D:/mvvm.jks')
//            storePassword '123456'
//        }
//    }


    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.debug
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
        }
    }

    //不进行代码静态检测
    lintOptions {
        abortOnError false
    }

    //开启databinding
    dataBinding {
        enabled = true
    }

    //生成libs目录
    sourceSets {
        main.jniLibs.srcDirs = ['libs']
    }

    //支持@Parcelize来实现Parcelable序列化
    androidExtensions {
        experimental = true
    }

    // 优化`transformClassDexBuilderForDebug`的编译速度
    dexOptions {
        preDexLibraries true
        maxProcessCount 8
    }

    kapt {
        useBuildCache = true
        javacOptions {
            option("-Xmaxerrs", 500)
        }
    }

}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api rootProject.ext.dependencies["constraintlayout"]
    api rootProject.ext.dependencies["appcompat"]
    api rootProject.ext.dependencies["core-ktx"]
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["runner"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]

    kapt rootProject.ext.dependencies["arouter-compiler"]
    api project(':library_common')

}